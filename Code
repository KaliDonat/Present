#include <iostream>
#include <vector>
#include <string>
using namespace std; vector<int> answers = {/*6:*/__,/*5:*/__,/*4:*/__,/*3_*/__,/*2:*/__,/*1:*/__}; vector<vector<string>> letters = {{"     ", "     ", "     ", "     ",
"    " }, { "     ", "  █  ", "     ", "     ", "     " }, { "     ", "  ██ ", "     ", "     ", "     " }, { "     ", "  █  ", "  █  ", "     ", "     " }, { "     ", "  ██ ", "  ██ ", "     ", "     " }, { "     ", "█    ", "█    ", "     ", "     " }, { "     ", "█   █", "     ", "     ", "     " }, { "     ", "█████", "     ", "     ", "     " }, { "     ", "  █  ", "  █  ", "  █  ", "     " }, { "     ", "  █  ", "  █  ", "  █  ", "     " }, { "    ", "  █  ", "     ", "     ", "     " }, { "     ", "█████", "     ", "     ", "     " }, { "     ", "█████", "█████", "     ", "     " }, { "     ", 
"  █  ", "     ", "     ", "     " }, { "     ", "█   █", "     ", "     ", "     " }, { "     ", " █  █", "     ", "     ", "     " }, { "     ", "█████", "     ", "     ", "     " }, { "     ", "  █  ", "     ", "     ", "     " }, { "     ", "█████", " █   ", "     ", "     " }, { "     ", "  █  ", " █   ", "     ", "     " }, { "     ", "█████", " ███ ", "     ", "     " }, { "     ", "     ", " ███ ", "     ", "     " }, { "     ", " ███ ", "    ", "     ", "     " }, { "     ", " ███ ", "     ", "     ", "     " }, { "     ", " █   ", "     ", "     ", "     " }, { "     ", " █   ", "     ",
"    ", "     " }, { "     ", " ██  ", "     ", "     ", "     " }, { "     ", "  █  ", "     ", "     ", "     " }, { "     ", "█████", "     ", "     ", "     " }, { "     ", " ██  ", "  █  ", "     ", "     " }, { "     ", "█████", "     ", " █   ", "     " }, { "     ", "█████", " ███ ", "     ", "    " }, { "     ", "     ", "     ", "     ", "     " }, { "  █  ", "  █  ", "  █  ", "     ", "  █  " }, { " █ █ ", " █ █ ", "     ", "     ", "     "}, { " █ █ ", "█████", " █ █ ", "█████", " █ █ " }, { "  █  ", " █   ", " ███ ", "   █ ", "  █  " }, { " █   ", " █   ", "  █  ", "   █ ", "   █ " }, 
{" █   ", " ███ ", " █ █ ", " █ █ ", " ███ " }, { "  █  ", "     ", "     ", "     ", "     " }, { "   █ ", "  █  ", "  █  ", "  █  ", "   █ " }, { " █   ", "  █  ", "  █  ", "  █  ", " █   " }, { "  █  ", " █ █ ", "█████", " █ █ ", "  █  " }, { "     ", "  █  ", "█████", "  █  ", "     " }, { "     ", "     ", "  █  ", "  █  ", " █   " }, { "     ", "     ", "█████", "     ", "     " }, { "     ", "     ", "  █  ", "     ", "     " }, { "     ", "    █", "   █ ", "  █  ", " █   " }, { "█████", "█   █", "█   █", "█   █", "█████" }, { "  █  ", " ██  ", "  █  ", "  █  ", "  █  " }, { "█████", "    █", "█████", "█    ", "█████" }, { "█████", "    █", "█████", "    █", "█████" }, { "█   █", "█   █", "█████", "    █", "    █" }, { "█████", "█    ", "█████", "    █", "█████" }, { "█████", "█    ", "█████", "█   █", "█████" }, { "█████", "    █", "    █", "    █", "    █" }, { "█████", "█   █", "█████",
"█   █", "█████" }, { "█████", "█   █", "█████", "    █", "█████" }, { "     ", "  █  ", "     ", "  █  ", "     " }, { "     ", "  █  ", "     ", "  █  ", " █   " }, { "     ", "   █ ", "  █  ", "   █ ", "     " }, { "     ", "█████", "     ", "█████", "     " }, { "     ", " █   ", "  █  ", " █   ", "   " }, { "█████", "    █", "█████", "     ", "    █" }, { " ███ ", "█   █", "█ █ █", "█   █", " ███ " }, { "█████", "█   █", "█████", "█   █", "█   █" }, { "█████", "█   █", "█████", "█   █", "█████" }, { "█████", "█    ", "█    ", "█    ", "█████" }, { "█████", "█   █", "█   █", "█   █", "█████" }, { "█████", "█    ", "████ ", "█    ", "█████" }, { "█████", "█    ", "████ ", "█    ", "█    " }, { "█████", "█    ", "█  ██", "█   █", "█████" }, { "█   █", "█   █", "█████", "█   █", "█   █" }, { "█████", "  █  ", "  █  ", "  █  ", "█████" }, { "█████", "   █ ", "   █ ", "█  █ ", "█████" }, { "█   █", "█  █ ", "██   ", "█  █ ", "█   █" }, { "█    ", "█    ", "█    ", "█    ", "█████" }, { "█   █", "██ ██", "█ █ █", "█   █", "█   █" }, { "█   █", "██  █", "█ █ █", "█  ██", "█   █" }, { "█████", "█   █", "█   █", "█   █", "█████" }, { "█████", "█   █", "█████", "█    ", "█    " }, { "█████", "█   █", "█   █", "█  ██", "█████" }, { "█████", "█   █", "█████", "█  █ ", "█   █" }, { "█████", "█    ", "█████", "    █", "█████" }, { "█████", "  █  ", "  █  ", "  █  ", "  █  " }, { "█   █", "█   █", "█   █", "█   █", "█████" }, { "█   █", "█   █", "█   █", " █ █ ", "  █  " }, { "█   █", "█   █", "█   █", "█████", "█   █" }, { "█   █", " █ █ ", "  █  ", " █ █ ", "█   █" }, { "█   █", " █ █ ", "  █  ", "  █  ", "  █  " }, { "█████", "   █ ", "  █  ", " █   ", 
"█████" } }; void displayCharacters(const int index) { if (index >= 0 && index < letters.size()) { for (const string& row : letters[index]) { cout << row << endl; } cout << endl; } else { cout << "Index " << index << " out of range. "; } } int main() {for (int i = answers.size() - 1; i >= 0; i--) { displayCharacters(static_cast<char>(answers[i] - ((static_cast<int>(!static_cast<bool>((i + 1) % 5))) + 1) * i)); } return 0; }
